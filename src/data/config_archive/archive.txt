### M7
time_limits = [(13, 21)]
self.cci_method = cci.CCI(self._data, period=24, upper_limit=220, lower_limit=220, time_limits=time_limits)

### M6
time_limits = [(13, 20)]
self.bband = bollingerbands.BollingerBands(self._data, period=23, upper_stdev_multiplier=2.7,
                                   lower_stdev_multiplier=2.9, time_limits=time_limits)
self.rsi_method = rsi.RSI(self._data, period=12, upper_limit=75, lower_limit=25, time_limits=time_limits)
self.adx_method = adx.ADX(self._data, period=12, time_limits=time_limits)

if self.adx_method.get_strength_value() < 30:
if self.bband.has_broken_out() == Position.JUST_GONE_ABOVE and self.rsi_method.is_outside() == Position.ABOVE and \
            self.rsi_method.moving_in_direction_for(4) == Trend.UP:
return Option.SELL
elif self.bband.has_broken_out() == Position.JUST_GONE_BELOW and self.rsi_method.is_outside() == Position.BELOW and \
            self.rsi_method.moving_in_direction_for(4) == Trend.DOWN:
return Option.BUY


### M5
        self.constants = const
        self.adx_method = adx.ADX(self._data, period=18, time_limits=[(9, 20)])
        # self.rsi_method = rsi.RSI(self._data, period=14, upper_limit=80, lower_limit=20, time_limits=[(9, 20)])
        self.stoch_method = stochastic_oscillator.StochasticOscillator(self._data, 15, 3, 80, 20, time_limits=[(9, 20)])

    def update_data_arrays(self):
        self.adx_method.update_data_arrays()
        # self.rsi_method.update_data_arrays()
        self.stoch_method.update_data_arrays()

    def get_result(self):
        if self.stoch_method.is_trading_time():
            if self.adx_method.get_strength_of_trend() == Strength.STRONG:
                if self.stoch_method.is_outside() == Position.ABOVE and \
                                self.stoch_method.has_crossed_over() == Position.JUST_GONE_BELOW:
                    return Option.SELL
                if self.stoch_method.is_outside() == Position.BELOW and \
                                self.stoch_method.has_crossed_over() == Position.JUST_GONE_ABOVE:
                    return Option.BUY


### M4

        time_limits = [(0, 9), (15, 23)]
        self.bband = bollingerbands.BollingerBands(self._data, period=24, upper_stdev_multiplier=2.1,
                                                   lower_stdev_multiplier=2.4, time_limits=time_limits)
        self.rsi_method = rsi.RSI(self._data, period=25, upper_limit=76, lower_limit=23, time_limits=time_limits)

    def update_data_arrays(self):
        self.rsi_method.update_data_arrays()
        self.bband.update_data_arrays()

    def get_result(self):
        if self.bband.is_trading_time():
            if self.bband.has_broken_out() == Position.JUST_GONE_ABOVE and self.rsi_method.is_outside() == Position.ABOVE:
                return Option.SELL
            elif self.bband.has_broken_out() == Position.JUST_GONE_BELOW and self.rsi_method.is_outside() == Position.BELOW:
                return Option.BUY
